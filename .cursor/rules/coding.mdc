---
alwaysApply: true
globs:
---

# Coding

* Do not write comments.
* Always write one short, ideally word or abbreviated variable names, unless live scope of given variable is long so in this case do not abbreviation but one word name.
  **✅ Good examples:**
  * `in` (input)
  * `out` (output)
  * `input` (input)
  * `output` (output)
  * `payload` (payload)
  * `req` (request)
  * `request` (request)
  * `res` (response/result)
  * `result` (result)
  * `response` (response)
  * `src` (source)
  * `source` (source)
  * `bin` (binary)
  * `ctx` (context)
  * `opt` (option)
  * `err` (error)
  * `msg` (message)
  * `str` (string)
  * `num` (number)
  * `tmp` (temporary)
  * `buf` (buffer)
  * `data` (data)
  * `url` (url)
  * `svc` (service)
  * `cli` (client)
  * `conn` (connection)
  * `key` (key)
  * `row` (row)
  * `rows` (rows)
  * `col` (column)
  * `query` (query)
  * `file` (file)
  * `filepath` (file path)
  * `path` (path)
  * `dir` (directory)
  * `ext` (extension)
  * `now` (now/current time)
  * `start` (start time)
  * `end` (end time)
  * `node` (node)
  * `store` (store/storage)
  * `i`, `j`, `k` (loop indices)
  * `v` (loop value)
  * `val` (value)
  * `value` (value)
  * `item` (item)
  * `host` (host)
  * `port` (port)
  * `addr` (address)
  * `n` (number/count)
  * `id` (identifier)
  * `count` (count)
  * `total` (total)
  
  **❌ Bad examples:**
  * `requestProcessor.go`
  * `echo_middleware.go`
  * `user_name` (use name or user)
  * `request_payload` (use req or payload)
  * `response_data` (use res or data)
  * `temp_variable` (use tmp)
  * `error_message` (use err or msg)
  * `databaseConnection` (use conn or db)
  * `inputString` (use in or str)
  * `outputBuffer` (use out or buf)
  * `filePathName` (use path or filepath)
  * `userId` (use id)
  * `apiResponse` (use res or response)
  * `strValue` (use str or val)
  * `arrItems` (use items)
  * `numCount` (use count or num)
  * `boolFlag` (use flag)
  * `mapData` (use data or m)
  * `ctxContext` (redundant, use ctx)
  * `requestBody` (use req or body)
  * `jsonPayload` (use payload or data)  
* Write variable names 2 word long when in given scope are 2 things the same kind and is necessary
* Keep using `NewA()`, `NewB()`, `NewC()` naming convention instead of `TransformA`, `NewB`, `CreateC` when creating new things
* Do not use `else`, better use `return`, `continue` or `break`
* Prefer writing functions which accept arguments and return new result instead of functions which modify themselves
* Use values instead of pointers, unless you really have to
* Return errors, do not log them in business logic
* Prefer `make()` with capacity when you know the size
* Use `strings.Builder` for string concatenation in loops
* Prefer consistent function naming verbs: Use: List, Find, Create, Update, Remove, Avoid: Fetch, Get, Add, Edit, Delete ✅ Examples: ListUsers(), FindUserByID(), CreateUser(), UpdateProfile(), RemoveSession(). ❌ Bad: FetchUsers(), GetUserByID(), AddUser(), EditProfile(), DeleteSession()
* Do not nest - ideal indentation is one level, max 2 if necessary, better use return multiple times to remove indentation except for 3 level indentation and only 1 return
* Avoid unnecessary context like user.Username or Product.ProductID, just use product.ID or user.name
